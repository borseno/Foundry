module Contracts.MultiBucket.MultiBucket exposing
    (  agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai
       --, agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20

    , agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther
    , eth_token_address
    , kyberNetworkProxy
    , mcdDai
    , swapEtherToToken
    , swapTokenToToken
    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- ETH_TOKEN_ADDRESS() function


eth_token_address :
    Address
    -> Call Address
eth_token_address contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "1878d1f1" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai(address,uint256,uint256,uint256,address) function


agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai :
    Address
    -> Address
    -> BigInt
    -> BigInt
    -> BigInt
    -> Address
    -> Call ()
agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithDai contractAddress buyer_ bucketId_ totalBuyAmount_ numberOfBuckets_ referrer_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e1e6345f" [ E.address buyer_, E.uint bucketId_, E.uint totalBuyAmount_, E.uint numberOfBuckets_, E.address referrer_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20(address,uint256,address,uint256,uint256,address) function
-- agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20 :
--     Address
--     -> Address
--     -> BigInt
--     -> Address
--     -> BigInt
--     -> BigInt
--     -> Address
--     -> Call ()
-- agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithErc20 contractAddress buyer_ bucketId_ Erc20_ totalBuyAmount_ numberOfBuckets_ referrer_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "41d5aaa6" [ E.address buyer_, E.uint bucketId_, E.address Erc20_, E.uint totalBuyAmount_, E.uint numberOfBuckets_, E.address referrer_ ]
--     , nonce = Nothing
--     , decoder = Decode.succeed ()
--     }
-- agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther(address,uint256,uint256,address) function


agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther :
    Address
    -> Address
    -> BigInt
    -> BigInt
    -> Address
    -> Call ()
agreeToTermsAndConditionsListedInThisBucketSaleContractAndEnterSaleWithEther contractAddress buyer_ bucketId_ numberOfBuckets_ referrer_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3e3dab39" [ E.address buyer_, E.uint bucketId_, E.uint numberOfBuckets_, E.address referrer_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- kyberNetworkProxy() function


kyberNetworkProxy :
    Address
    -> Call Address
kyberNetworkProxy contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "d77366a4" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- mcdDai() function


mcdDai :
    Address
    -> Call Address
mcdDai contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "5a0eac04" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- swapEtherToToken() function


swapEtherToToken :
    Address
    -> Call BigInt
swapEtherToToken contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "4fbccfc7" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- swapTokenToToken(address,uint256) function


swapTokenToToken :
    Address
    -> Address
    -> BigInt
    -> Call BigInt
swapTokenToToken contractAddress srcToken_ srcQty_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "98bf72b9" [ E.address srcToken_, E.uint srcQty_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }
